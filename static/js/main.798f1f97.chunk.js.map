{"version":3,"sources":["Components/ChatHeader.jsx","Components/Message.jsx","features/appSlice.jsx","features/userSlice.jsx","Firebase.js","Components/Chat.jsx","Components/SidebarChannel.jsx","Components/Sidebar.jsx","Components/Login.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","setChannelId","selectChannelName","app","selectChannelId","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","disabled","onChange","e","target","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.798f1f97.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./ChatHeader.css\";\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\nconst ChatHeader = ({channelName}) => {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            {/* in chatheader we have leftchatheader and rightchatheader */}\r\n            \r\n            {/* left side */}\r\n            <div className=\"chatHeader_left\">\r\n                {/* Title*/}\r\n                <h3>\r\n                    <span className=\"chatHeader_hash\">#</span>\r\n            {channelName}\r\n               </h3>\r\n            </div>\r\n\r\n            {/* right side */}\r\n            <div className=\"ChatHeader_right\">\r\n                {/* Icons */}\r\n                <div className=\"icon_chat\">\r\n                    <NotificationsIcon />\r\n                    <LocationOnIcon />\r\n                    <PeopleIcon />\r\n\r\n                    <div className=\"chatHeader_search\">\r\n                        {/* search */}\r\n                        <input placeholder=\"Search\" />\r\n                        <SearchRoundedIcon />\r\n                    </div>\r\n\r\n                    {/* icons */}\r\n\r\n                    <SendRoundedIcon />\r\n                    <HelpRoundedIcon />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatHeader;\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react';\r\nimport \"./Message.css\";\r\nconst Message=({timestamp,user,message}) =>{\r\n    return (\r\n        <div className=\"message\">\r\n          <Avatar src={user.photo}/>  \r\n         \r\n          <div className=\"message_info\">\r\n              <h4>\r\n                  {/* userName */}\r\n                  {user.displayName}\r\n                  {/* Time Stamp */}\r\n                  <span className=\"message_timestamp\">\r\n                         {new Date(timestamp?.toDate()).toUTCString()}\r\n                  </span>\r\n              </h4>\r\n\r\n              <p>{message}</p>\r\n          </div>\r\n\r\n         </div>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n\r\n\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n//How to add \"slices\" of reducer logic to the Redux store with createSlice\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId:null,\r\n    channelName:null,\r\n  },\r\n  reducers: {\r\n  setChannelInfo: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.channelId=action.payload.channelId;\r\n      state.channelName=action.payload.channelName;\r\n    },\r\n    },\r\n  \r\n});\r\n\r\nexport const { setChannelId } = appSlice.actions;\r\n\r\n\r\nexport const {setChannelInfo}=appSlice.actions;\r\nexport const  selectChannelName = state => state.app.channelName;\r\n export const selectChannelId = state => state.app.channelId;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n  /* We're going to use the Redux Toolkit createSlice function \r\n  to make a reducer function that knows how to handle our posts data.\r\n Reducer functions need to have some initial data included \r\nso that the Redux store has those values loaded when the app starts up*/\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user:null,\r\n  },\r\n  reducers: {\r\n   login: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.user=action.payload;\r\n    },\r\n    logout: state => {\r\n      state.user = null;\r\n \r\n  \r\n    },\r\n  },\r\n});\r\n\r\nexport const { login,logout} = userSlice.actions;\r\n\r\n\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\n\r\nexport default userSlice.reducer;","//1.install firebase and then import this module to use it.\r\n/*We will be using two Firebase services for this project :\r\n1.Authentication service\r\n2. Cloud Firestore Service */\r\nimport firebase from \"firebase\";\r\n\r\n//2.Firebase config object we grabbed earlier\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyACYf_GypbfEk_sRZIMKoAHt1ArL7hlBl4\",\r\n    authDomain: \"discord-clone-cfbde.firebaseapp.com\",\r\n    databaseURL: \"https://discord-clone-cfbde.firebaseio.com\",\r\n    projectId: \"discord-clone-cfbde\",\r\n    storageBucket: \"discord-clone-cfbde.appspot.com\",\r\n    messagingSenderId: \"24290841655\",\r\n    appId: \"1:24290841655:web:f528622feb23a572359bb2\"\r\n  };\r\n  //3.intialize our firebase App using the configuration details we got from firebase\r\n  //We have firebase.intializeApp method for intilizing App\r\n  /*The function initializeApp will create the firebase app and \r\n  firestore enables you to write to the database. */ \r\n  const firebaseApp=firebase.initializeApp(firebaseConfig);\r\n  //4.grab the database\r\n  const db=firebaseApp.firestore();\r\n //5.do authentication\r\n/* Auth enables the authentication so when a user logs in it adds it to Firebase. \r\n Provider enables you to sign in using your Google Account. */\r\n  const auth=firebase.auth();\r\n  const provider=new firebase.auth.GoogleAuthProvider();\r\n  export {auth,provider};\r\n  export default db;","import React, { useEffect, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectChannelId, selectChannelName } from \"../features/appSlice\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport db from \"../Firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      message: input,\r\n      user: user,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      {/* chat Header component */}\r\n      {/* Now let’s go into ChatHeader.js, put channelName as a prop and \r\n      instead of the random channel name you put, type the below. */}\r\n      <ChatHeader channelName={channelName} />\r\n      {/* message component */}\r\n      <div className=\"chat_msg\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n          {/*Bottom Input Section  */}\r\n      <div className=\"chat_input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message #${channelName}`}\r\n          />\r\n          {/* Now we don’t really want to display the button because \r\n          Discord doesn’t have a button and to send messages you hit Enter. */}\r\n          <button\r\n            disabled={!channelId}\r\n            className=\"chat_inputButton\"\r\n            type=\"submit\"\r\n            onClick={sendMessage}\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"chat_inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setChannelInfo } from \"../features/appSlice\";\r\nimport \"./SidebarChannel.css\";\r\n\r\nconst SidebarChannel=({ id, channelName })=> {  //props passed\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    /* When we click on the channel name we want Redux to update the store.\r\n     We need to declare dispatch in order to do this.*/ \r\n    <div\r\n      className=\"sidebarChannel\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName,\r\n          })\r\n        )}\r\n    >\r\n      <h4>\r\n        <span className=\"sidebarChannel__hash\">#</span>\r\n        {channelName}\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarChannel;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport SidebarChannel from \"./SidebarChannel\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\r\nimport CallIcon from \"@material-ui/icons/Call\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport db, { auth } from \"../Firebase\";\r\n\r\nconst Sidebar=()=> {\r\n  const user = useSelector(selectUser); //react-redux hooks\r\n       //useState Hooks\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //collection in firebase->channels and takes snapshot of collection\r\n    //Give me channels folder nd onSnapshot gives me \r\n    //snapshot of channels collection (folder)\r\n    db.collection(\"channels\").onSnapshot((snapshot) =>\r\n      setChannels(\r\n        //snapahot.docs gives us array (list of channels)---(going to all snapshot docs)\r\n        snapshot.docs.map((doc) => ({  //map thru every single document\r\n          id: doc.id,\r\n          channel: doc.data(),\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n/*useEffects takes two arguments and dependencies.having empty arrar means run ony once\r\nhaving dependencies name means run when dependencies ex name,age change*/\r\n  \r\n//Adding Channel\r\nconst handleAddChannel = () => {\r\n  //JS|window prompt() method is used to display a dialog with an optional message\r\n    const channelName = prompt(\"Enter a new channel name\");\r\n    if (channelName) {\r\n      //We are going into the db, inside the channel collection, and add the channelName.\r\n      db.collection(\"channels\").add({\r\n        channelName: channelName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n\r\n      {/* Top Sidebar Section */}\r\n      <div className=\"sidebar_top\">\r\n        <h3> Code With Nobel </h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n       {/* Channels Section \r\n       we want sidebar channel to take maximum space or room*/}\r\n      <div className=\"sidebar_channels\">\r\n\r\n        <div className=\"sidebar_channelsHeader\">\r\n          <div className=\"sidebar_header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n        </div>\r\n\r\n                {/*Sidebar Channel Components */}\r\n        <div className=\"sidebar_channelsList\">\r\n             {/* Array.map method */}\r\n          {channels.map(({ id, channel }) => (\r\n            <SidebarChannel\r\n              key={id}\r\n              id={id}\r\n              channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Bottom voice section */}\r\n     <div className=\"sidebar_voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar_voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"sidebar_voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar_voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div>\r\n        {/*Profile Section  */}\r\n        {/* What we want to do if we click our profile image on the sidebar\r\n         then it should log us out. */}\r\n      <div className=\"sidebar__profile\">\r\n        {/*  So we are going to add an onClick event handler to the Avatar \r\n        and the function will be auth.signOut.  */}\r\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n{/* Substring is a method that in this case only gets the first five characters. \r\nThe first number is inclusive and the last number is exclusive. */}\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"../Firebase\";\r\n// we are going to import auth and provider from our local firebase file\r\nimport React from \"react\";\r\nimport \"./Login.css\";\r\n\r\nconst Login=()=> {\r\n   /*Authenticate with Firebase using the Google provider object. \r\n    You can prompt your users to sign in with their Google Accounts either by \r\n    opening a pop-up window or by redirecting to the sign-in page. \r\n    The redirect method is preferred on mobile devices.*/ \r\n  const signIn = () => {\r\n    // Google Login\r\n   //To sign in with a pop-up window, call signInWithPopup:\r\n  auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login_logo\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/sco/thumb/9/98/Discord_logo.svg/800px-Discord_logo.svg.png\"\r\n          alt=\"Discord Logo\"\r\n        />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n    //This a login page to login with google we have to use signInWithPopup() method\r\n    //create a signIn Function\r\n        //Google login\r\n\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"./App.css\";\r\nimport Chat from \"./Components/Chat\";\r\nimport Sidebar from \"./Components/Sidebar\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport Login from \"./Components/Login\";\r\nimport { auth } from \"./Firebase\";\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  /*dispatch allows us to push things into the data layer \r\n  so we can retrieve where ever we feel like */\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n/*useSelector is a React hook and \r\nputting selectUser as a piece of state will retrieve that piece of information. */ \r\n  \r\n/*useEffect is a React hook that fires the code only once when the component loads. \r\nWe use a useEffect here because we wouldn’t want to be running in an infinite loop.*/ \r\nuseEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // the user is logged in\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        // the user is logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    /*We want to online render the app once the user is logged in right.So in order to do that we have to use something called the ternary operator \r\n    which basically simplifies the if and else conditional statement to one line */\r\n    <div className=\"app\">\r\n      {/* we need to pull in the user into App.js. with useSelector hook  */}\r\n      {user ? (\r\n        <>\r\n        {/* We have two main components sidebar and chat */}\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n      {/* if there is no user show login page */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n/*1.ConfigureStore replaces createStore,\r\n where you can still pass your reducers and middlewares as parameters.\\\r\n 2.createAction removes some of the boilerplate you usually have to write for each action,\r\n  like the type parameter, \r\n how the payload looks and the argument name you will use.\r\n 3.createReducer is the last piece of the puzzle and the one with the most\r\n  interesting differences compared to the conventional approach.\r\nInstead of declaring a switch/case for each action type, you can use the\r\n actions themselves as parameters \r\nand have methods for how each of them should change the store's state.*/","import {configureStore} from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\nimport appReducer from \"../features/appSlice\";\r\n\r\n/*Redux is state Management Tool or library. \r\nyour Application state are managed by redux.\r\nRedux is a pattern and library for managing and updating application state,\r\n using events called \"actions\".\r\n1.store 2.reducers 3.actions are 3 main concepts in redux \r\nRedux help us to create global states like context API.*/\r\nexport default configureStore ({\r\nreducer: {\r\n        user:userReducer, //reducers in object \r\n        app:appReducer,\r\n    }\r\n});\r\n//reducer is something that listens to actions\r\n// configureStore is similar to createStore function from redux \r\n/*To create store we use configureStore function and pass a reducer in it.\r\nWith configureStore we can pass different reducers in a object*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}